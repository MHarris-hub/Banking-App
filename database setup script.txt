--define schema and datatypes
create schema bank_records;

--define database tables
create table bank_records.accounts (
	id serial unique,
	balance numeric not null,
	--balance numeric not null check(balance > 0), --might be a problem with this line
	approval_status boolean not null,
	customer_id int not null,
	
	primary key(id)
	--foreign key(customer_id) references customers(id)
	
);

create table bank_records.transactions (
	id serial unique,
	transaction_type varchar(10) not null,
	amount numeric not null,
	from_account int not null,	--account where money is originating
	to_account int,				--account where money is coming from
	"timestamp" timestamp not null,
	
	primary key(id)
);

create table bank_records.customers (
	id serial unique,
	username varchar(20) not null unique,
	"password" varchar(20) not null,
	first_name varchar(20) not null,
	last_name varchar(20) not null,
	email varchar(50),
	phone varchar(10),
	dob date not null,
	
	primary key(id)
);

create table bank_records.employees (
	id serial unique,
	username varchar(20) not null,
	"password" varchar(20) not null,

	primary key(id)
);

--create customer test data
insert into bank_records.customers(first_name, last_name, username, "password", dob)
values ('John', 'Smith', 'J123', 'pass', '1980-01-01');

insert into bank_records.customers(first_name, last_name, username, "password", dob)
values ('Sally', 'Poe', 'S456', 'pass', '1975-09-11');

--create employee test data
insert into bank_records.employees(username, "password")
values ('emp', 'pass')

--create test account data
insert into bank_records.accounts(balance, approval_status)
values (100, true);

insert into bank_records.accounts(balance, approval_status)
values (70000, true);

insert into bank_records.accounts(balance, approval_status)
values (9000, false);